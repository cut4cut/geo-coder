{"version":3,"sources":["components/Map.js","components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["mapboxgl","accessToken","Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","latitude","longitude","accuracy","zoom","prevProps","map","getLayer","removeLayer","removeSource","type","data","features","geometry","coordinates","properties","title","icon","console","log","flyTo","center","addLayer","id","source","layout","icon-image","text-field","text-font","text-offset","text-anchor","_this2","_this$state","container","mapContainer","style","on","addControl","NavigationControl","_this3","react_default","a","createElement","ref","el","className","React","Component","housesGeoData","139","141","137","145","143","129","Menu","goSearch","houseNumber","searchField","match","geoData","setState","geodata","isFetched","isToggleOn","inputLongitude","inputLatitude","handleClick","bind","assertThisInitialized","event","changedValue","target","value","reactstrap_es","for","hidden","name","placeholder","onChange","handleChangeSearch","handleChangeLatitude","handleChangeLongitude","xs","color","onClick","label","toFixed","src_components_Map","App","src_components_Menu","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.68859e7a.chunk.js","sourcesContent":["import React from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport './Map.css';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA';\n\nclass Map extends React.Component {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      'latitude' : 56.640977,\n      'longitude' : 47.851050,\n      'accuracy' : 0,\n      zoom : 12\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const latitude = this.props.latitude;\n    const longitude = this.props.longitude;\n\n    if (latitude !== prevProps.latitude || longitude !== prevProps.longitude) {\n      if(typeof this.map.getLayer('0') !== 'undefined') {\n        this.map.removeLayer('0').removeSource({\n            \"type\": \"geojson\",\n            \"data\": {\n                \"type\": \"FeatureCollection\",\n                \"features\": [{\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [prevProps.longitude, prevProps.latitude]\n                    },\n                    \"properties\": {\n                        \"title\": \"\",\n                        \"icon\": \"circle\"\n                    }\n                }]\n            }\n        });\n        console.log(this.map.getLayer());\n      }\n      this.map.flyTo({\n          center: [\n            this.props.longitude,\n            this.props.latitude],\n          zoom: 18\n      });\n\n      this.map.addLayer({\n        \"id\": \"0\",\n        \"type\": \"symbol\",\n        \"source\": {\n            \"type\": \"geojson\",\n            \"data\": {\n                \"type\": \"FeatureCollection\",\n                \"features\": [{\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [longitude, latitude]\n                    },\n                    \"properties\": {\n                        \"title\": \"\",\n                        \"icon\": \"circle\"\n                    }\n                }]\n            }\n        },\n        \"layout\": {\n            \"icon-image\": \"{icon}-15\",\n            \"text-field\": \"{title}\",\n            \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\n            \"text-offset\": [0, 0.6],\n            \"text-anchor\": \"top\"\n        }\n      });\n    }\n  }\n\n  componentDidMount() {\n    let {latitude, longitude, accuracy, zoom} = this.state;\n    this.map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v9',\n      center: [longitude, latitude],\n      zoom: zoom\n    });\n\n   this.map.on( 'load', () => this.map.addControl(new mapboxgl.NavigationControl()) );\n  }\n\n  render() {\n    return (\n      <div ref={el => this.mapContainer = el} className='Map' />\n    );\n  }\n}\n\nexport default Map","import React from 'react'\nimport { Button, InputGroup, InputGroupAddon, InputGroupText, Input, FormGroup,  Label, Form, CustomInput, Container, Col, Row} from 'reactstrap';\nimport { getUserGeoData } from '../lib/get-userGeoData';\nimport { getDataFromServer, sendDataToServer } from '../lib/connect-api';\nimport Map from './Map'\nimport './Menu.css'\n\nconst options = {\n  enableHighAccuracy: true,\n  timeout: 5000,\n  maximumAge: 0\n};\n \nconst housesGeoData = {\n  '139' : {'latitude' : 56.641013, 'longitude' : 47.852073},\n  '141' : {'latitude' : 56.6412494670703, 'longitude' : 47.8527131368358},\n  '137' : {'latitude' : 56.640986, 'longitude' : 47.851539},\n  '145' : {'latitude' : 56.6413107130796, 'longitude' : 47.854231058607},\n  '143' : {'latitude' : 56.6412903568593, 'longitude' : 47.8538588353902},\n  '129' : {'latitude' : 56.6411857097733, 'longitude' : 47.8499710833476}\n} \n\nconst steetGeoData = {\n  'name' : 'Козьмодемьянский тракт', \n  'center' : [56.6409864473845, 47.8514404623998]\n}\n\nclass Menu extends React.Component {\n  /* \n   * В state храним геоданные для передачи в качестве одного из аргументов \n   * в запросе к API. Через props передаем геоданные в Map, где происходит\n   * дальнейшая генерация http-запроса к API и обработка полученного ответа от сервера для рендеринга на карте.\n   */\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      searchField : '',\n      isToggleOn: false,\n      isFetched: false,\n      inputLongitude: 0,\n      inputLatitude: 0,\n      geodata: {}\n    };\n    this.handleClick = this.handleClick.bind(this);\n  };\n\n  handleClick() {\n    this.setState(state => ({\n      isToggleOn: !state.isToggleOn\n    }));\n    console.log(this.state.isToggleOn)\n  }\n\n  handleChangeSearch (event) {\n    const changedValue = event.target.value;\n    console.log(changedValue);\n    this.setState({searchField : changedValue});\n    console.log(this.state);\n  }\n\n  handleChangeLatitude(event) {\n    const changedValue = event.target.value;\n    console.log(changedValue);\n    this.setState({inputLatitude: changedValue});\n    console.log(this.state);\n  }\n\n  handleChangeLongitude(event) {\n    const changedValue = event.target.value;\n    console.log(changedValue);\n    this.setState({inputLongitude: changedValue});\n    console.log(this.state);\n  }\n/*\n  goSearch = () => {\n    console.log('GO!');\n    getUserGeoData(options)\n      .then(res => {\n        sendDataToServer('', res).then(\n          r => this.setState({geodata : res, isFetched : true}) );\n      })\n      .catch(err =>  console.warn('ERROR'+err.code+' : '+err.message));\n    console.log(this.state['geodata']);\n  }\n*/\n  goSearch = () => {\n    console.log('Go SEARCH');\n    const houseNumber = this.state.searchField.match(/\\d+/);\n    console.log(houseNumber);\n    const geoData = housesGeoData[houseNumber];\n    console.log(geoData);\n    this.setState({geodata : geoData, isFetched : true})\n  }\n\n  render() {\n    const isToggleOn = this.state.isToggleOn;\n    const isFetched = this.state.isFetched;\n    const latitude = this.state.geodata['latitude'];\n    const longitude = this.state.geodata['longitude'];\n    return (\n    \t<div>\n    \t  <div className='menu'>\n        {/* Шапка Карточки \n          <h1>\n            Геокодер\n            <span role=\"img\" aria-label=\"sheep\">🐑</span>  \n          </h1>\n        */}\n        {/* Подложка */}\n        <div className=\"outer-div\">\n          <div className=\"inner-div\">\n\n          {/* Элемент поиска */}\n          <FormGroup>\n            <Label for=\"addressValue\" hidden>Адрес</Label>\n            <Input \n              type=\"text\"\n              name=\"addressValue\"\n              id=\"addressValue\"\n              placeholder=\"Адрес\"\n              onChange={event => this.handleChangeSearch(event)}\n            />\n          </FormGroup>\n\n          {/* Элемент ввода геоданных */}\n          {isToggleOn ?\n            (<FormGroup>\n              <Label for=\"latitudeValue\" hidden>Широта</Label>\n              <Input\n                type=\"number\"\n                name=\"latitudeValue\"\n                id=\"latitudeValue\"\n                placeholder=\"Широта\"\n                onChange={event => this.handleChangeLatitude(event)}\n              />\n              <Label for=\"longitudeValue\" hidden>Долгота</Label>\n              <Input\n                type=\"number\"\n                name=\"password\"\n                id=\"longitudeValue\"\n                placeholder=\"Долгота\"\n                onChange={event => this.handleChangeLongitude(event)}\n              />\n            </FormGroup>) \n            : ''\n          }\n\n          {/* Контейнер элементов контроля формы */}\n          <Container>\n            <Row>\n              <Col xs=\"3\">\n                <Button color=\"primary\" onClick={this.goSearch}>Поиск</Button>\n              </Col>\n              <Col xs=\"3\"></Col>\n              <Col xs=\"3\">\n                <CustomInput type=\"checkbox\" id=\"exampleCustomCheckbox\" onClick={this.handleClick} label=\"геоточка\"/>\n              </Col>\n            </Row>\n          </Container>\n\n\n          {/* Элемент вывода ответа от геокодера и заданных координат */}\n          {isFetched ?\n            (<div className=\"output-div\">\n              <p>{latitude.toFixed(4)}   {longitude.toFixed(4)}</p>\n            </div>) \n            : ''\n          }\n          </div>\n        </div>\n    \t  </div>\n        {/* Компонент Карта */}\n        <Map latitude={this.state.geodata['latitude']} longitude={this.state.geodata['longitude']} accuracy={this.state.geodata['accuracy']} />\n    \t</div>\n    );\n  }\n}\n// <Map latitude={this.state.geodata['latitude']} longitude={this.state.geodata['longitude']} accuracy={this.state.geodata['accuracy']} />\n// <Map latitude={this.state.latitude} longitude={this.state.longitude} accuracy={this.state.accuracy} />\nexport default Menu\n\n\n","import React, { Component } from 'react';\nimport Menu from './components/Menu';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Menu />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}