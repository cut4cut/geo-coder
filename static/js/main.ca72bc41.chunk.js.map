{"version":3,"sources":["components/Map.js","components/MapOL.js","components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["mapboxgl","accessToken","React","Component","state","selection","idProp","MapOL","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","vtLayer","VectorTileLayer","declutter","source","VectorTileSource","format","MVT","url","style","feature","selected","get","Style","stroke","Stroke","color","width","fill","Fill","map","Map","layers","target","mapContainer","view","View","center","zoom","on","event","features","getFeaturesAtPixel","pixel","setStyle","getStyle","fid","_this","react_default","a","createElement","ref","el","className","Menu","goSearch","console","log","searchField","isToggleOn","isFetched","inputLongitude","inputLatitude","geodata","handleClick","bind","assertThisInitialized","setState","changedValue","value","_this2","latitude","longitude","reactstrap_es","for","hidden","type","name","id","placeholder","onChange","handleChangeSearch","handleChangeLatitude","handleChangeLongitude","xs","onClick","label","toFixed","components_MapOL","App","src_components_Menu","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca72bc41.chunk.js","sourcesContent":["import React from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport './Map.css';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA';\n\nclass Map extends React.Component {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      'latitude' : 56.640977,\n      'longitude' : 47.851050,\n      'accuracy' : 0,\n      zoom : 12\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const latitude = this.props.latitude;\n    const longitude = this.props.longitude;\n\n    if (latitude !== prevProps.latitude || longitude !== prevProps.longitude) {\n      if(typeof this.map.getLayer('0') !== 'undefined') {\n        this.map.removeLayer('0').removeSource({\n            \"type\": \"geojson\",\n            \"data\": {\n                \"type\": \"FeatureCollection\",\n                \"features\": [{\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [prevProps.longitude, prevProps.latitude]\n                    },\n                    \"properties\": {\n                        \"title\": \"\",\n                        \"icon\": \"circle\"\n                    }\n                }]\n            }\n        });\n        console.log(this.map.getLayer());\n      }\n      this.map.flyTo({\n          center: [\n            this.props.longitude,\n            this.props.latitude],\n          zoom: 18\n      });\n\n      this.map.addLayer({\n        \"id\": \"0\",\n        \"type\": \"symbol\",\n        \"source\": {\n            \"type\": \"geojson\",\n            \"data\": {\n                \"type\": \"FeatureCollection\",\n                \"features\": [{\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [longitude, latitude]\n                    },\n                    \"properties\": {\n                        \"title\": \"\",\n                        \"icon\": \"circle\"\n                    }\n                }]\n            }\n        },\n        \"layout\": {\n            \"icon-image\": \"{icon}-15\",\n            \"text-field\": \"{title}\",\n            \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\n            \"text-offset\": [0, 0.6],\n            \"text-anchor\": \"top\"\n        }\n      });\n    }\n  }\n\n  componentDidMount() {\n    let {latitude, longitude, accuracy, zoom} = this.state;\n    this.map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v9',\n      center: [longitude, latitude],\n      zoom: zoom\n    });\n\n   this.map.on( 'load', () => this.map.addControl(new mapboxgl.NavigationControl()) );\n  }\n\n  render() {\n    return (\n      <div ref={el => this.mapContainer = el} className='Map' />\n    );\n  }\n}\n\nexport default Map","import React from 'react'\n\nimport Map from 'ol/Map.js';\nimport View from 'ol/View.js';\nimport MVT from 'ol/format/MVT.js';\nimport VectorTileLayer from 'ol/layer/VectorTile.js';\nimport VectorTileSource from 'ol/source/VectorTile.js';\nimport {Fill, Stroke, Style} from 'ol/style.js';\n\nimport './Map.css';\n\nlet state = {\n      selection : {},\n      idProp : 'iso_a3'\n    };\n\nclass MapOL extends React.Component {\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    var vtLayer = new VectorTileLayer({\n      declutter: true,\n      source: new VectorTileSource({\n        format: new MVT(),\n        url: 'https://ahocevar.com/geoserver/gwc/service/tms/1.0.0/' +\n          'ne:ne_10m_admin_0_countries@EPSG%3A900913@pbf/{z}/{x}/{-y}.pbf'\n      }),\n      style: function(feature) {\n        var selected = !!(state.selection[feature.get(state.idProp)]);\n        return new Style({\n          stroke: new Stroke({\n            color: selected ? 'grey' : 'gray',\n            width: selected ? 1 : 1\n          }),\n          fill: new Fill({\n            color: selected ? 'blue' : 'rgba(20,20,20,0.9)'\n          })\n        });\n      }\n    });\n\n    var map = new Map({\n      layers: [\n        vtLayer\n      ],\n      target: this.mapContainer,\n      view: new View({\n        center: [0, 0],\n        zoom: 2\n      })\n    });\n\n          map.on('click', function(event) {\n        var features = map.getFeaturesAtPixel(event.pixel);\n        if (!features) {\n          state.selection = {};\n          // force redraw of layer style\n          vtLayer.setStyle(vtLayer.getStyle());\n          return;\n        }\n        var feature = features[0];\n        var fid = feature.get(state.idProp);\n\n        state.selection = {};\n\n        // add selected feature to lookup\n        state.selection[fid] = feature;\n\n        // force redraw of layer style\n        vtLayer.setStyle(vtLayer.getStyle());\n      });\n}\n\n  render() {\n    return (\n      <div ref={el => this.mapContainer = el} className='Map' />\n    );\n  }\n}\n\nexport default MapOL","import React from 'react'\nimport { Button, InputGroup, InputGroupAddon, InputGroupText, Input, FormGroup,  Label, Form, CustomInput, Container, Col, Row} from 'reactstrap';\nimport { getUserGeoData } from '../lib/get-userGeoData';\nimport { getDataFromServer, sendDataToServer } from '../lib/connect-api';\nimport Map from './Map'\nimport MapOL from './MapOL'\nimport './Menu.css'\n\nconst options = {\n  enableHighAccuracy: true,\n  timeout: 5000,\n  maximumAge: 0\n};\n \nconst housesGeoData = {\n  '139' : {'latitude' : 56.641013, 'longitude' : 47.852073},\n  '141' : {'latitude' : 56.6412494670703, 'longitude' : 47.8527131368358},\n  '137' : {'latitude' : 56.640986, 'longitude' : 47.851539},\n  '145' : {'latitude' : 56.6413107130796, 'longitude' : 47.854231058607},\n  '143' : {'latitude' : 56.6412903568593, 'longitude' : 47.8538588353902},\n  '129' : {'latitude' : 56.6411857097733, 'longitude' : 47.8499710833476}\n} \n\nconst steetGeoData = {\n  'name' : 'Козьмодемьянский тракт', \n  'center' : [56.6409864473845, 47.8514404623998]\n}\n\nclass Menu extends React.Component {\n  /* \n   * В state храним геоданные для передачи в качестве одного из аргументов \n   * в запросе к API. Через props передаем геоданные в Map, где происходит\n   * дальнейшая генерация http-запроса к API и обработка полученного ответа от сервера для рендеринга на карте.\n   */\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      searchField : '',\n      isToggleOn: false,\n      isFetched: false,\n      inputLongitude: 0,\n      inputLatitude: 0,\n      geodata: {}\n    };\n    this.handleClick = this.handleClick.bind(this);\n  };\n\n  handleClick() {\n    this.setState(state => ({\n      isToggleOn: !state.isToggleOn\n    }));\n    console.log(this.state.isToggleOn)\n  }\n\n  handleChangeSearch (event) {\n    const changedValue = event.target.value;\n    console.log(changedValue);\n    this.setState({searchField : changedValue});\n    console.log(this.state);\n  }\n\n  handleChangeLatitude(event) {\n    const changedValue = event.target.value;\n    console.log(changedValue);\n    this.setState({inputLatitude: changedValue});\n    console.log(this.state);\n  }\n\n  handleChangeLongitude(event) {\n    const changedValue = event.target.value;\n    console.log(changedValue);\n    this.setState({inputLongitude: changedValue});\n    console.log(this.state);\n  }\n/*\n  goSearch = () => {\n    console.log('GO!');\n    getUserGeoData(options)\n      .then(res => {\n        sendDataToServer('', res).then(\n          r => this.setState({geodata : res, isFetched : true}) );\n      })\n      .catch(err =>  console.warn('ERROR'+err.code+' : '+err.message));\n    console.log(this.state['geodata']);\n  }\n*/\n  goSearch = () => {\n    console.log('Go SEARCH');\n    /*\n    const houseNumber = this.state.searchField.match(/\\d+/);\n    console.log(houseNumber);\n    const geoData = housesGeoData[houseNumber];\n    console.log(geoData);\n    this.setState({geodata : geoData, isFetched : true})\n    */\n  }\n\n  render() {\n    const isToggleOn = this.state.isToggleOn;\n    const isFetched = this.state.isFetched;\n    const latitude = this.state.geodata['latitude'];\n    const longitude = this.state.geodata['longitude'];\n    return (\n    \t<div>\n    \t  <div className='menu'>\n        {/* Шапка Карточки \n          <h1>\n            Геокодер\n            <span role=\"img\" aria-label=\"sheep\">🐑</span>  \n          </h1>\n        */}\n        {/* Подложка */}\n        <div className=\"outer-div\">\n          <div className=\"inner-div\">\n\n          {/* Элемент поиска */}\n          <FormGroup>\n            <Label for=\"addressValue\" hidden>Адрес</Label>\n            <Input \n              type=\"text\"\n              name=\"addressValue\"\n              id=\"addressValue\"\n              placeholder=\"Адрес\"\n              onChange={event => this.handleChangeSearch(event)}\n            />\n          </FormGroup>\n\n          {/* Элемент ввода геоданных */}\n          {isToggleOn ?\n            (<FormGroup>\n              <Label for=\"latitudeValue\" hidden>Широта</Label>\n              <Input\n                type=\"number\"\n                name=\"latitudeValue\"\n                id=\"latitudeValue\"\n                placeholder=\"Широта\"\n                onChange={event => this.handleChangeLatitude(event)}\n              />\n              <Label for=\"longitudeValue\" hidden>Долгота</Label>\n              <Input\n                type=\"number\"\n                name=\"password\"\n                id=\"longitudeValue\"\n                placeholder=\"Долгота\"\n                onChange={event => this.handleChangeLongitude(event)}\n              />\n            </FormGroup>) \n            : ''\n          }\n\n          {/* Контейнер элементов контроля формы */}\n          <Container>\n            <Row>\n              <Col xs=\"3\">\n                <Button color=\"primary\" onClick={this.goSearch}>Поиск</Button>\n              </Col>\n              <Col xs=\"3\"></Col>\n              <Col xs=\"3\">\n                <CustomInput type=\"checkbox\" id=\"exampleCustomCheckbox\" onClick={this.handleClick} label=\"геоточка\"/>\n              </Col>\n            </Row>\n          </Container>\n\n\n          {/* Элемент вывода ответа от геокодера и заданных координат */}\n          {isFetched ?\n            (<div className=\"output-div\">\n              <p>{latitude.toFixed(4)}   {longitude.toFixed(4)}</p>\n            </div>) \n            : ''\n          }\n          </div>\n        </div>\n    \t  </div>\n        {/* Компонент Карта */}\n       {/*} <Map latitude={this.state.geodata['latitude']} longitude={this.state.geodata['longitude']} accuracy={this.state.geodata['accuracy']} />*/}\n       <MapOL/>\n    \t</div>\n    );\n  }\n}\n// <Map latitude={this.state.geodata['latitude']} longitude={this.state.geodata['longitude']} accuracy={this.state.geodata['accuracy']} />\n// <Map latitude={this.state.latitude} longitude={this.state.longitude} accuracy={this.state.accuracy} />\nexport default Menu\n\n\n","import React, { Component } from 'react';\nimport Menu from './components/Menu';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Menu />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}