{"version":3,"sources":["lib/get-userGeoData.js","components/Map.js","components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["getUserGeoData","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","pos","latitude","coords","longitude","accuracy","error","mapboxgl","accessToken","Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","zoom","prevProps","console","log","map","flyTo","center","addLayer","id","type","source","data","features","geometry","coordinates","properties","title","icon","layout","icon-image","text-field","text-font","text-offset","text-anchor","_this2","_this$state","container","mapContainer","style","on","addControl","NavigationControl","_this3","react_default","a","createElement","ref","el","className","React","Component","enableHighAccuracy","timeout","maximumAge","Menu","goSearch","then","res","setState","geodata","catch","err","warn","searchField","isToggleOn","inputLongitude","inputLatitude","handleClick","bind","assertThisInitialized","event","changedValue","target","value","role","aria-label","reactstrap_es","for","hidden","name","placeholder","onChange","handleChangeSearch","handleChangeLatitude","handleChangeLongitude","sm","size","order","onClick","label","src_components_Map","App","src_components_Menu","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf538280.chunk.js","sourcesContent":["export const getUserGeoData = (options) => {\n\treturn new Promise((resolve, reject) => \n\t\tnavigator.geolocation.getCurrentPosition(\n\t\t\tpos => resolve({ 'latitude' : pos.coords.latitude, \n\t\t\t\t\t\t\t 'longitude' : pos.coords.longitude, \n\t\t\t\t\t\t\t 'accuracy' : pos.coords.accuracy }), \n\t\t\terror => reject(error), \n\t\t\toptions)\n\t\t)\n}\n\n","import React from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport {ScaleControl} from 'mapbox-gl';\nimport { getDataFromServer } from '../lib/connect-api';\nimport './Map.css';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA';\n\nclass Map extends React.Component {\n  /*\n   * Аналогично Menu в state хранениться текущая\n   * комманда к API от пользователя, для передачи\n   * в обработчик http-запросов к серверу API \n   */ \n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      'latitude' : 55.7558,\n      'longitude' : 37.6,\n      'accuracy' : 0,\n      zoom : 12\n    };\n  }\n  /*\n   * Обработка запроса, переданных через props.\n   * В случае изинения props вызвается обработчик.\n  */\n  componentDidUpdate(prevProps) {\n    if (this.props.latitude !== prevProps.latitude || this.props.longitude !== prevProps.longitude) {\n      console.log('ggg');\n      this.map.flyTo({\n          center: [\n            this.props.longitude,\n            this.props.latitude],\n          zoom: 18\n      });\n      this.map.addLayer({\n        \"id\": \"0\",\n        \"type\": \"symbol\",\n        \"source\": {\n            \"type\": \"geojson\",\n            \"data\": {\n                \"type\": \"FeatureCollection\",\n                \"features\": [{\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [this.props.longitude, this.props.latitude]\n                    },\n                    \"properties\": {\n                        \"title\": \"YOU!\",\n                        \"icon\": \"monument\"\n                    }\n                }]\n            }\n        },\n        \"layout\": {\n            \"icon-image\": \"{icon}-15\",\n            \"text-field\": \"{title}\",\n            \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\n            \"text-offset\": [0, 0.6],\n            \"text-anchor\": \"top\"\n        }\n    });\n    }\n  }\n\n\n  componentDidMount() {\n    let {latitude, longitude, accuracy, zoom} = this.state;\n    this.map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v9',\n      center: [longitude, latitude],\n      zoom: zoom\n    });\n\n   this.map.on('load', () => {\n        this.map.addControl(new mapboxgl.NavigationControl());\n        console.log('HERE');  \n    });\n  }\n\n  render() {\n    return (\n      <div ref={el => this.mapContainer = el} className='Map' />\n    );\n  }\n}\n\nexport default Map","import React from 'react'\nimport { Button, InputGroup, InputGroupAddon, InputGroupText, Input, FormGroup,  Label, Form, CustomInput, Container, Col, Row} from 'reactstrap';\nimport { getUserGeoData } from '../lib/get-userGeoData';\nimport Map from './Map'\nimport './Menu.css'\n\nconst options = {\n  enableHighAccuracy: true,\n  timeout: 5000,\n  maximumAge: 0\n};\n\nclass Menu extends React.Component {\n  /* \n   * В state храним геоданные для передачи в качестве одного из аргументов \n   * в запросе к API. Через props передаем геоданные в Map, где происходит\n   * дальнейшая генерация http-запроса к API и обработка полученного ответа от сервера для рендеринга на карте.\n   */\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      searchField : '',\n      isToggleOn: false,\n      inputLongitude: 0,\n      inputLatitude: 0,\n      geodata: {}\n    };\n    this.handleClick = this.handleClick.bind(this);\n  };\n\n  handleClick() {\n    this.setState(state => ({\n      isToggleOn: !state.isToggleOn\n    }));\n    console.log(this.state.isToggleOn)\n  }\n\n  handleChangeSearch (event) {\n    const changedValue = event.target.value;\n    console.log(changedValue);\n    this.setState({searchField : changedValue});\n    console.log(this.state);\n  }\n\n  handleChangeLatitude(event) {\n    const changedValue = event.target.value;\n    console.log(changedValue);\n    this.setState({inputLatitude: changedValue});\n    console.log(this.state);\n  }\n\n  handleChangeLongitude(event) {\n    const changedValue = event.target.value;\n    console.log(changedValue);\n    this.setState({inputLongitude: changedValue});\n    console.log(this.state);\n  }\n\n  goSearch = () => {\n    console.log('GO!');\n    getUserGeoData(options)\n      .then(res => this.setState({geodata : res}))\n      .catch(err =>  console.warn('ERROR(${err.code}): ${err.message}'));\n    console.log(this.state['geodata']);\n  }\n\n  render() {\n    const isToggleOn = this.state.isToggleOn;\n    const latitude = this.state.geodata['latitude'];\n    const longitude = this.state.geodata['longitude'];\n    return (\n    \t<div>\n    \t  <div className='menu'>\n        {/* Шапка Карточки */}\n          <h1>\n            Геокодер\n            <span role=\"img\" aria-label=\"sheep\">🐑</span>  \n          </h1>\n\n        {/* Подложка */}\n        <div className=\"outer-div\">\n          <div className=\"inner-div\">\n\n          {/* Элемент поиска */}\n          <FormGroup>\n            <Label for=\"addressValue\" hidden>Адрес</Label>\n            <Input \n              type=\"text\"\n              name=\"addressValue\"\n              id=\"addressValue\"\n              placeholder=\"Адрес\"\n              onChange={event => this.handleChangeSearch(event)}\n            />\n          </FormGroup>\n\n          {/* Элемент ввода геоданных */}\n          {isToggleOn ?\n            (<FormGroup>\n              <Label for=\"latitudeValue\" hidden>Широта</Label>\n              <Input\n                type=\"number\"\n                name=\"latitudeValue\"\n                id=\"latitudeValue\"\n                placeholder=\"Широта\"\n                onChange={event => this.handleChangeLatitude(event)}\n              />\n              <Label for=\"longitudeValue\" hidden>Долгота</Label>\n              <Input\n                type=\"number\"\n                name=\"password\"\n                id=\"longitudeValue\"\n                placeholder=\"Долгота\"\n                onChange={event => this.handleChangeLongitude(event)}\n              />\n            </FormGroup>) \n            : ''\n          }\n\n          {/* Контейнер элементов контроля формы */}\n          <Container>\n            <Row>\n              <Col sm={{ size: 0, order: 0}}>\n                <Button onClick={this.goSearch}>Поиск</Button>\n              </Col>\n              <Col sm={{ size: 6, order: 0}}>\n                <CustomInput type=\"checkbox\" id=\"exampleCustomCheckbox\" onClick={this.handleClick} label=\"геоточка\"/>\n              </Col>\n            </Row>\n          </Container>\n\n          {/* Элемент вывода ответа от геокодера и заданных координат */}\n          <div className=\"output-div\">\n            <p>{latitude}</p>\n            <p>{longitude}</p>\n          </div>\n\n          </div>\n        </div>\n    \t  </div>\n        {/* Компонент Карта */}\n        <Map latitude={this.state.geodata['latitude']} longitude={this.state.geodata['longitude']} accuracy={this.state.geodata['accuracy']} />\n    \t</div>\n    );\n  }\n}\n// <Map latitude={this.state.geodata['latitude']} longitude={this.state.geodata['longitude']} accuracy={this.state.geodata['accuracy']} />\n// <Map latitude={this.state.latitude} longitude={this.state.longitude} accuracy={this.state.accuracy} />\nexport default Menu\n\n\n","import React, { Component } from 'react';\nimport Menu from './components/Menu';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Menu />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}