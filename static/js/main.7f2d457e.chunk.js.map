{"version":3,"sources":["lib/get-userGeoData.js","components/Map.js","components/Menu.js","App.js","serviceWorker.js","index.js"],"names":["getUserGeoData","options","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","pos","latitude","coords","longitude","accuracy","error","mapboxgl","accessToken","Map","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","zoom","prevProps","console","log","map","flyTo","center","addLayer","id","type","source","data","features","geometry","coordinates","properties","title","icon","layout","icon-image","text-field","text-font","text-offset","text-anchor","_this2","_this$state","container","mapContainer","style","on","addControl","NavigationControl","_this3","react_default","a","createElement","ref","el","className","React","Component","enableHighAccuracy","timeout","maximumAge","Menu","goSearch","then","res","setState","geodata","catch","err","warn","role","aria-label","reactstrap_es","addonType","onClick","src_components_Map","App","src_components_Menu","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f2d457e.chunk.js","sourcesContent":["export const getUserGeoData = (options) => {\n\treturn new Promise((resolve, reject) => \n\t\tnavigator.geolocation.getCurrentPosition(\n\t\t\tpos => resolve({ 'latitude' : pos.coords.latitude, \n\t\t\t\t\t\t\t 'longitude' : pos.coords.longitude, \n\t\t\t\t\t\t\t 'accuracy' : pos.coords.accuracy }), \n\t\t\terror => reject(error), \n\t\t\toptions)\n\t\t)\n}\n\n","import React from 'react'\nimport mapboxgl from 'mapbox-gl'\nimport {ScaleControl} from 'mapbox-gl';\nimport { getDataFromServer } from '../lib/connect-api';\nimport './Map.css';\n\nmapboxgl.accessToken = 'pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4M29iazA2Z2gycXA4N2pmbDZmangifQ.-g_vE53SD2WrJ6tFX7QHmA';\n\nclass Map extends React.Component {\n  /*\n   * –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ Menu –≤ state —Ö—Ä–∞–Ω–µ–Ω–∏—Ç—å—Å—è —Ç–µ–∫—É—â–∞—è\n   * –∫–æ–º–º–∞–Ω–¥–∞ –∫ API –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏\n   * –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ http-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–µ—Ä—É API \n   */ \n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      'latitude' : 55.7558,\n      'longitude' : 37.6,\n      'accuracy' : 0,\n      zoom : 12\n    };\n  }\n  /*\n   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ props.\n   * –í —Å–ª—É—á–∞–µ –∏–∑–∏–Ω–µ–Ω–∏—è props –≤—ã–∑–≤–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫.\n  */\n  componentDidUpdate(prevProps) {\n    if (this.props.latitude !== prevProps.latitude || this.props.longitude !== prevProps.longitude) {\n      console.log('ggg');\n      this.map.flyTo({\n          center: [\n            this.props.longitude,\n            this.props.latitude],\n          zoom: 18\n      });\n      this.map.addLayer({\n        \"id\": \"0\",\n        \"type\": \"symbol\",\n        \"source\": {\n            \"type\": \"geojson\",\n            \"data\": {\n                \"type\": \"FeatureCollection\",\n                \"features\": [{\n                    \"type\": \"Feature\",\n                    \"geometry\": {\n                        \"type\": \"Point\",\n                        \"coordinates\": [this.props.longitude, this.props.latitude]\n                    },\n                    \"properties\": {\n                        \"title\": \"YOU!\",\n                        \"icon\": \"monument\"\n                    }\n                }]\n            }\n        },\n        \"layout\": {\n            \"icon-image\": \"{icon}-15\",\n            \"text-field\": \"{title}\",\n            \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\n            \"text-offset\": [0, 0.6],\n            \"text-anchor\": \"top\"\n        }\n    });\n    }\n  }\n\n\n  componentDidMount() {\n    let {latitude, longitude, accuracy, zoom} = this.state;\n    this.map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v9',\n      center: [longitude, latitude],\n      zoom: zoom\n    });\n\n   this.map.on('load', () => {\n        this.map.addControl(new mapboxgl.NavigationControl());\n        console.log('HERE');  \n    });\n  }\n\n  render() {\n    return (\n      <div ref={el => this.mapContainer = el} className='Map' />\n    );\n  }\n}\n\nexport default Map","import React from 'react'\nimport { Button, InputGroup, InputGroupAddon, InputGroupText, Input } from 'reactstrap';\nimport { getUserGeoData } from '../lib/get-userGeoData';\nimport Map from './Map'\nimport './Menu.css'\n\nconst options = {\n  enableHighAccuracy: true,\n  timeout: 5000,\n  maximumAge: 0\n};\n\nclass Menu extends React.Component {\n  /* \n   * –í state –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–ª–æ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–º–∞–Ω–¥—ã –∫ API –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ props\n   * –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Map, –≥–¥–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–∞–ª—å–Ω–µ–π—à–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è http-–∑–∞–ø—Ä–æ—Å–∞ –∫ API \n   * –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–∞ –∫–∞—Ä—Ç–µ.\n   */\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      geodata: {\n\n      }\n    };\n  };\n  /*\n   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è '–í—ã–±–æ—Ä –û–∫—Ä—É–≥–∞': –∑–∞–¥–∞–µ–º —Ç–µ–ª–æ –∫–æ–º–º–∞–Ω–¥—ã,\n   * –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏–¥–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–∫—Ä—É–≥–∞.\n   */\n  goSearch = () => {\n    console.log('GO!');\n    getUserGeoData(options)\n      .then(res => this.setState({geodata : res}))\n      .catch(err =>  console.warn('ERROR(${err.code}): ${err.message}'));\n    console.log(this.state);\n  }\n\n  render() {\n  \t/*\n  \t * Defined the Menu comp. in this way \n  \t * to transfer data from the Form to the Map comp.\n  \t * via props - the simplest way\n  \t */\n    return (\n    \t<div>\n    \t  <div className='menu'>\n        {/* –®–∞–ø–∫–∞ –ö–∞—Ä—Ç–æ—á–∫–∏ */}\n          <h1>\n            –ì–µ–æ–∫–æ–¥–µ—Ä\n            <span role=\"img\" aria-label=\"sheep\">üêë</span>  \n          </h1>\n\n        {/* –ü–æ–¥–ª–æ–∂–∫–∞ */}\n        <div className=\"outer-div\">\n          <div className=\"inner-div\">\n\n          {/* –≠–ª–µ–º–µ–Ω—Ç –ø–æ–∏—Å–∫–∞ */}\n          <InputGroup>\n            <Input />\n            <InputGroupAddon addonType=\"append\">\n              <Button onClick={this.goSearch}>–ü–æ–∏—Å–∫</Button>\n            </InputGroupAddon>\n          </InputGroup>\n\n          {/* –≠–ª–µ–º–µ–Ω—Ç –≤—ã–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≥–µ–æ–∫–æ–¥–µ—Ä–∞ –∏ –∑–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç */}\n          <div className=\"output-div\">\n            <p>{this.state.geodata['latitude']}</p>\n            <p>{this.state.geodata['longitude']}</p>\n            <p>{this.state.geodata['accuracy']}</p>\n          </div>\n\n          {/* –≠–ª–µ–º–µ–Ω—Ç –í—ã–±–æ—Ä –ø–æ –æ–∫—Ä—É–≥–∞–º */}\n\n          </div>\n        </div>\n    \t  </div>\n        {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ö–∞—Ä—Ç–∞ */}\n        <Map latitude={this.state.geodata['latitude']} longitude={this.state.geodata['longitude']} accuracy={this.state.geodata['accuracy']} />\n    \t</div>\n    );\n  }\n}\n// <Map latitude={this.state.latitude} longitude={this.state.longitude} accuracy={this.state.accuracy} />\nexport default Menu\n\n\n","import React, { Component } from 'react';\nimport Menu from './components/Menu';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <Menu />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}